{"version":3,"sources":["src/models/state.js","src/views/canvas.js","src/controllers/controller.js","src/views/form.js","src/views/errorModal.js","src/views/helpWindow.js","index.js"],"names":["State","figures","acceptedFigures","input","index","figureType","checkFigure","figureCoords","checkCoords","options","checkOptions","dashed","checkLineType","push","id","length","undefined","dashedLine","console","log","pop","trimStart","split","includes","SyntaxError","type","lineCrdRegExp","pointsRegExp","test","match","map","i","JSON","parse","center","radius","radius1","radius2","optRegExp","colorRegExp","bgColorRegExp","color","slice","bgColor","lineTypeRegExp","Canvas","app","document","getElementById","canvasDiv","createElement","className","header","innerText","canvas","width","height","append","getContext","clearRect","figureData","context","strokeStyle","setLineDash","beginPath","moveTo","lineTo","closePath","stroke","forEach","coords","fillStyle","strokeRect","fillRect","fill","arc","Math","PI","ellipse","Controller","model","form","errorModal","helpWingow","handleAddFigure","bind","handleRemoveLast","handleResetCanvas","handleShowHelp","render","figure","add","err","setErrorMessage","message","clearCanvas","draw","removeLatest","clearData","window","Form","formElement","required","cols","rows","placeholder","submitBtn","removeLatestBtn","resetCanvasBtn","showHelpBtn","btnBlock","handler","addEventListener","event","preventDefault","value","ErrorModal","errorBlock","errorMessage","checkErrorBtn","hideErrorModal","HelpWindow","field","ul","rules","button","thanks","rule","li","controller"],"mappings":"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","file":"cqg.3b52c9c8.js","sourceRoot":"..","sourcesContent":["export class State {\r\n    constructor() {\r\n        this.figures = [];\r\n        this.acceptedFigures = ['line', 'multiline', 'rectangle', 'triangle', 'circle', 'ellipse'];\r\n    }\r\n    //method for adding figures to the model\r\n    add(input, index) {\r\n        const figureType = this.checkFigure(input, index);\r\n        const figureCoords = this.checkCoords(input, figureType, index);\r\n        const options = this.checkOptions(input, index);\r\n        const dashed = this.checkLineType(input);\r\n        this.figures.push({\r\n            figureType,\r\n            figureCoords,\r\n            id: this.figures.length,\r\n            options: options ? options : undefined,\r\n            dashedLine: dashed,\r\n        });\r\n        console.log(this.figures)\r\n    }\r\n    //method for removing the last added figure\r\n    removeLatest() {\r\n        this.figures.pop();\r\n        console.log(this.figures)\r\n    }\r\n    //method for clearing model data\r\n    clearData() {\r\n        this.figures = [];\r\n    }\r\n    // figure type validator\r\n    checkFigure(input, index) {        \r\n        const figureType = input.trimStart().split(' ')[0];\r\n        if (this.acceptedFigures.includes(figureType)) return figureType;\r\n        else throw new SyntaxError(`Wrong figure type at line ${index}, check formatting help for more info`);\r\n    }\r\n    //coordinates validator\r\n    checkCoords(input, type, index) {\r\n        const lineCrdRegExp = /-p (\\[\\d+, \\d+\\] |\\[\\d+, \\d+\\]){2}/;\r\n        const rectCrdRegExp = /-p (\\[\\d+, \\d+\\] |\\[\\d+, \\d+\\]){2}/;\r\n        const triCrdRegExp = /-p (\\[\\d+, \\d+\\] |\\[\\d+, \\d+\\]){3}/;\r\n        const crclCrdRegExp = /-p \\[\\d+, \\d+\\] -r \\d+/;\r\n        const ellCrdRegExp = /-p \\[\\d+, \\d+\\] -r1 \\d+ -r2 \\d+/;\r\n        const pointsRegExp = /\\[\\d+, \\d+\\]/gm;\r\n\r\n        switch (true) {\r\n            case (type === 'line' && lineCrdRegExp.test(input) && input.match(pointsRegExp).length === 2): {\r\n                return input.match(pointsRegExp).map(i => JSON.parse(i));\r\n            }\r\n            case (type === 'multiline' && lineCrdRegExp.test(input)): {\r\n                return input.match(pointsRegExp).map(i => JSON.parse(i));\r\n            }\r\n            case (type === 'rectangle' && rectCrdRegExp.test(input) && input.match(pointsRegExp).length === 2): {\r\n                return input.match(pointsRegExp).map(i => JSON.parse(i));\r\n            }\r\n            case (type === 'triangle' && triCrdRegExp.test(input) && input.match(pointsRegExp).length === 3): {\r\n                return input.match(pointsRegExp).map(i => JSON.parse(i));\r\n            }\r\n            case (type === 'circle' && crclCrdRegExp.test(input)): {\r\n                const centerCoordsRegExp = /\\[\\d+, \\d+\\]/gm;\r\n                const radRegExp = /-r \\d+/gm;\r\n                return {\r\n                    center: input.match(centerCoordsRegExp).map(i => JSON.parse(i))[0],\r\n                    radius: input.match(radRegExp)[0].split(' ')[1]\r\n                }\r\n            }\r\n            case (type === 'ellipse' && ellCrdRegExp.test(input)): {\r\n                const centerCoordsRegExp = /\\[\\d+, \\d+\\]/gm;\r\n                const rad1RegExp = /-r1 \\d+/gm;\r\n                const rad2RegExp = /-r2 \\d+/gm;\r\n                return {\r\n                    center: input.match(centerCoordsRegExp).map(i => JSON.parse(i))[0],\r\n                    radius1: input.match(rad1RegExp)[0].split(' ')[1],\r\n                    radius2: input.match(rad2RegExp)[0].split(' ')[1],\r\n                }\r\n            }\r\n            default: throw new SyntaxError(`Wrong coordinates formatting at line ${index}, check formatting help for more info`);\r\n        }\r\n    }\r\n    // options validator\r\n    checkOptions(input, index) {\r\n        const optRegExp = /-c|-b/gm;\r\n        const colorRegExp = /-c rgb\\(\\d+, \\d+, \\d+\\)|-c rgba\\(\\d+, \\d+, \\d+, (1\\)|0?\\.\\d+\\))|-c #[A-Fa-f0-9]{6}/;\r\n        const bgColorRegExp = /-b rgb\\(\\d+, \\d+, \\d+\\)|-b rgba\\(\\d+, \\d+, \\d+, (1\\)|0?\\.\\d+\\))|-b #[A-Fa-f0-9]{6}/;        \r\n\r\n        if (!optRegExp.test(input)) {\r\n            return {\r\n                color: 'black',\r\n                bgColor: 'black'\r\n            }\r\n        }\r\n        else if (input.match(optRegExp).length === 1 && (colorRegExp.test(input) || bgColorRegExp.test(input))) {\r\n            return {\r\n                color: input.match(colorRegExp) ? input.match(colorRegExp)[0].slice(3) : 'black',\r\n                bgColor: input.match(bgColorRegExp) ? input.match(bgColorRegExp)[0].slice(3) : 'black',\r\n            }\r\n        }\r\n        else if (input.match(optRegExp).length === 2 && colorRegExp.test(input) && bgColorRegExp.test(input)) {\r\n            return {\r\n                color: input.match(colorRegExp)[0].slice(3),\r\n                bgColor:  input.match(bgColorRegExp)[0].slice(3),\r\n            }\r\n        }\r\n        else if (input.match(optRegExp).length === 2 && (!colorRegExp.test(input) || !bgColorRegExp.test(input))) {\r\n            throw new SyntaxError(`Wrong option formatting at line ${index}, check formatting help for more info`);\r\n        }\r\n        else {\r\n            throw new SyntaxError(`Wrong option formatting at line ${index}, check formatting help for more info`);\r\n        }\r\n    }\r\n    checkLineType(input) {\r\n        const lineTypeRegExp = /-dashed/;\r\n        if(lineTypeRegExp.test(input)) return true\r\n        else return false\r\n    }\r\n} ","import './canvas.css'\r\n\r\nexport class Canvas {\r\n    render() {\r\n        this.app = document.getElementById('root');\r\n        this.canvasDiv = document.createElement('div');\r\n        this.canvasDiv.className = 'canvasBlock'\r\n\r\n        this.header = document.createElement('h3');\r\n        this.header.innerText = 'Drawing area';\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = '700';\r\n        this.canvas.height = '600';\r\n        this.canvas.className = 'canvas';\r\n\r\n        this.canvasDiv.append(this.header, this.canvas);\r\n        this.app.append(this.canvasDiv);\r\n    }\r\n\r\n    clearCanvas() {\r\n        const context = this.canvas.getContext('2d');\r\n        context.clearRect(0, 0, 700, 600);\r\n    }\r\n\r\n    draw(figureData) {\r\n        switch (figureData.figureType) {\r\n            case ('line'): {\r\n                const context = this.canvas.getContext('2d');\r\n                context.strokeStyle = figureData.options.color;\r\n                figureData.dashedLine ? context.setLineDash([5, 5]) : undefined\r\n                context.beginPath();\r\n                context.moveTo(...figureData.figureCoords[0]);\r\n                context.lineTo(...figureData.figureCoords[1]);\r\n                context.closePath();\r\n                context.stroke();\r\n                context.setLineDash([0]);\r\n                break\r\n            }\r\n            case ('multiline'): {\r\n                const context = this.canvas.getContext('2d');\r\n                context.strokeStyle = figureData.options.color;\r\n                figureData.dashedLine ? context.setLineDash([5, 5]) : undefined\r\n                context.beginPath();\r\n                context.moveTo(...figureData.figureCoords[0]);                \r\n                figureData.figureCoords.slice(1).forEach(coords => {\r\n                    context.lineTo(...coords);\r\n                    context.moveTo(...coords);\r\n                })\r\n                context.closePath();\r\n                context.stroke();\r\n                context.setLineDash([0]);\r\n                break\r\n            }\r\n            case ('rectangle'): {\r\n                const context = this.canvas.getContext('2d');\r\n                context.strokeStyle = figureData.options.color;\r\n                figureData.dashedLine ? context.setLineDash([5, 5]) : undefined\r\n                context.fillStyle = figureData.options.bgColor;\r\n                context.beginPath();\r\n                context.closePath();\r\n                context.strokeRect(...figureData.figureCoords[0], ...figureData.figureCoords[1]);\r\n                context.fillRect(...figureData.figureCoords[0], ...figureData.figureCoords[1]);\r\n                context.setLineDash([0]);\r\n                break\r\n            }\r\n            case ('triangle'): {\r\n                const context = this.canvas.getContext('2d');\r\n                context.strokeStyle = figureData.options.color;\r\n                figureData.dashedLine ? context.setLineDash([5, 5]) : undefined\r\n                context.fillStyle = figureData.options.bgColor;\r\n                context.beginPath();\r\n                context.moveTo(...figureData.figureCoords[0]);\r\n                context.lineTo(...figureData.figureCoords[1]);\r\n                context.lineTo(...figureData.figureCoords[2]);\r\n                // context.lineTo(...figureData.figureCoords[0]);\r\n                context.closePath();\r\n                context.stroke();\r\n                context.fill();\r\n                context.setLineDash([0]);\r\n                break\r\n            }\r\n            case ('circle'): {\r\n                const context = this.canvas.getContext('2d');\r\n                context.strokeStyle = figureData.options.color;\r\n                figureData.dashedLine ? context.setLineDash([5, 5]) : undefined\r\n                context.fillStyle = figureData.options.bgColor;\r\n                context.beginPath();\r\n                context.arc(...figureData.figureCoords.center, figureData.figureCoords.radius, 0, 2 * Math.PI);\r\n                context.closePath();\r\n                context.stroke();\r\n                context.fill();\r\n                context.setLineDash([0]);\r\n                break\r\n            }\r\n            case ('ellipse'): {\r\n                const context = this.canvas.getContext('2d');\r\n                context.strokeStyle = figureData.options.color;\r\n                figureData.dashedLine ? context.setLineDash([5, 5]) : undefined\r\n                context.fillStyle = figureData.options.bgColor;\r\n                context.beginPath();\r\n                context.ellipse(...figureData.figureCoords.center, figureData.figureCoords.radius1, figureData.figureCoords.radius2, Math.PI, 0, 2 * Math.PI)\r\n                context.closePath();\r\n                context.stroke();\r\n                context.fill();\r\n                context.setLineDash([0]);\r\n                break\r\n            }\r\n        }\r\n    }\r\n}","export class Controller {\r\n    constructor(model, form, canvas, errorModal, helpWingow) {\r\n        //binding this\r\n        this.handleAddFigure = this.handleAddFigure.bind(this);\r\n        this.handleRemoveLast = this.handleRemoveLast.bind(this);\r\n        this.handleResetCanvas = this.handleResetCanvas.bind(this);\r\n        this.handleShowHelp = this.handleShowHelp.bind(this);\r\n\r\n        this.model = model;\r\n        this.form = form;\r\n        this.canvas = canvas;\r\n        this.errorModal = errorModal;\r\n        this.helpWingow = helpWingow\r\n\r\n        //rendering views\r\n        this.canvas.render();\r\n        this.form.render();\r\n        this.errorModal.render();\r\n        this.helpWingow.render();\r\n\r\n        //initialising event listeners\r\n        this.form.handleAddFigure(this.handleAddFigure);\r\n        this.form.handleRemoveLast(this.handleRemoveLast);\r\n        this.form.handleResetCanvas(this.handleResetCanvas);\r\n        this.form.handleShowHelp(this.handleShowHelp);\r\n\r\n    }\r\n\r\n    handleAddFigure(input) {\r\n        try {\r\n            input.split('\\n').forEach((figure, index) => {\r\n                if (figure !== '') this.model.add(figure, index + 1)\r\n            });\r\n        }\r\n        catch (err) {\r\n            this.errorModal.setErrorMessage(err.message)\r\n        }\r\n        finally {\r\n            this.canvas.clearCanvas();\r\n            this.model.figures.length > 0 ?\r\n                this.model.figures.forEach(figure => this.canvas.draw(figure)) :\r\n                undefined\r\n        }\r\n    }\r\n\r\n    handleRemoveLast() {\r\n        try {\r\n            this.model.removeLatest();\r\n            this.canvas.clearCanvas();\r\n            this.model.figures.forEach(figure => this.canvas.draw(figure))\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    handleResetCanvas() {\r\n        try {\r\n            this.model.clearData();\r\n            this.canvas.clearCanvas();\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    handleShowHelp() {\r\n        this.helpWingow.window.className = 'helpWindow';\r\n    }\r\n}","import './form.css'\r\n\r\nexport class Form {\r\n    render() {\r\n        this.app = document.getElementById('root');\r\n        this.formElement = document.createElement('form');\r\n        this.formElement.className = 'inputForm'\r\n\r\n        this.header = document.createElement('h3');\r\n        this.header.innerText = 'Input area';\r\n\r\n        this.input = document.createElement('textarea');\r\n        this.input.className = 'inpt';\r\n        this.input.required = true;\r\n        this.input.cols = 74;\r\n        this.input.rows = 5;\r\n        this.input.placeholder = '...input, example: ellipse -p [75, 75] -r1 50 -r2 25 -c rgb(0, 255, 0) -b rgba(255, 0, 0, 0.3)'\r\n\r\n        this.submitBtn = document.createElement('button');\r\n        this.submitBtn.type = 'submit';\r\n        this.submitBtn.innerText = 'Submit';\r\n\r\n        this.removeLatestBtn = document.createElement('button');\r\n        this.removeLatestBtn.type = 'button';\r\n        this.removeLatestBtn.innerText = 'Remove last figure';\r\n\r\n        this.resetCanvasBtn = document.createElement('button');\r\n        this.resetCanvasBtn.type = 'button';\r\n        this.resetCanvasBtn.innerText = 'Reset Canvas';\r\n\r\n        this.showHelpBtn = document.createElement('button');\r\n        this.showHelpBtn.type = 'button';\r\n        this.showHelpBtn.innerText = 'Show formatting help';\r\n\r\n\r\n        this.btnBlock = document.createElement('div');\r\n        this.btnBlock.append(this.submitBtn, this.removeLatestBtn, this.resetCanvasBtn, this.showHelpBtn);\r\n\r\n        this.formElement.append(this.header, this.input, this.btnBlock);\r\n        this.app.append(this.formElement);\r\n    }\r\n\r\n    handleAddFigure(handler) {\r\n        this.formElement.addEventListener('submit', event => {\r\n            event.preventDefault();\r\n            if (this.input.value) {\r\n                handler(this.input.value);\r\n                this.input.value = ''\r\n            }\r\n        })\r\n    }\r\n\r\n    handleRemoveLast(handler) {\r\n        this.removeLatestBtn.addEventListener('click', () => {\r\n            handler();\r\n        })\r\n    }\r\n\r\n    handleResetCanvas(handler) {\r\n        this.resetCanvasBtn.addEventListener('click', () => {\r\n            handler();\r\n        })\r\n    }\r\n\r\n    handleShowHelp(handler) {\r\n        this.showHelpBtn.addEventListener('click', () => {\r\n            handler();\r\n        })\r\n    }\r\n}","import './errorModal.css'\r\n\r\nexport class ErrorModal {    \r\n    render() {\r\n        this.app = document.getElementById('root');\r\n        this.errorModal = document.createElement('div');\r\n        this.errorModal.className = 'errorModal--hidden';\r\n\r\n        this.errorBlock = document.createElement('div');\r\n        this.errorBlock.className = 'errorBlock'\r\n\r\n        this.errorMessage = document.createElement('h3');\r\n\r\n        this.checkErrorBtn = document.createElement('button');\r\n        this.checkErrorBtn.innerText = 'Ok';\r\n\r\n        this.errorBlock.append(this.errorMessage, this.checkErrorBtn);\r\n        this.errorModal.append(this.errorBlock)\r\n        this.app.append(this.errorModal);\r\n\r\n        this.checkErrorBtn.addEventListener('click', () => {\r\n            this.hideErrorModal();\r\n        })\r\n    }\r\n\r\n    setErrorMessage(err) {\r\n        this.errorMessage.innerText = `${err}`;\r\n        this.errorModal.className = 'errorModal'\r\n    }\r\n\r\n    hideErrorModal() {\r\n        this.errorMessage.innerText = '';\r\n        this.errorModal.className = 'errorModal--hidden'\r\n    }\r\n}","import './helpWindow.css'\r\n\r\nexport class HelpWindow {\r\n    render() {\r\n        this.app = document.getElementById('root');\r\n\r\n        this.window = document.createElement('div');\r\n        this.window.className = 'helpWindow--hidden';\r\n\r\n        this.field = document.createElement('div');\r\n        this.field.className = 'helpField';\r\n\r\n        this.header = document.createElement('h3');\r\n        this.header.innerText = 'Formatting rules and help'\r\n\r\n        this.ul = document.createElement('ul');\r\n        this.rules = ['accepted figures: line, rectangle, triangle, circle, ellipse, multiline',\r\n            'accepted format: \\n figureName -p [xCoordinate, yCoordinate]... -c rgba(0-255, 0-255, 0-255, 0-1) -b rgba(0-255, 0-255, 0-255, 0-1)',\r\n            'you can use rgb instead of rgba, for example: rgb(0-255, 0-255, 0-255)',\r\n            'you can also use hex format to define colors, for example: #FF0000',\r\n            '-c defines outline color, -b defines inner figure color',\r\n            'you can add -dashed option to make dashed line or outline, example: \\n line -p [0, 0] [50, 50] -dashed',\r\n            'to draw a line you must supply two coordinates (starting and ending points), example: \\n line -p [0, 0] [50, 50]',\r\n            'to draw a rectangle you must supply two coordinates (starting and ending points of diagonal), example: \\n rectangle -p [0, 0] [50, 50]',\r\n            'to draw a triangle you must supply three coordinates (points of triangle), example: \\n triangle -p [50, 300] [50, 100] [300, 100]',\r\n            'to draw a circle you must supply one coordinate (center) and a radius, example: \\n circle -p [75, 75] -r 25',\r\n            'to draw an ellipse you must supply one coordinate (center) and two radiuses, example: \\n ellipse -p [75, 75] -r1 50 -r2 25',\r\n            'to draw a multiline you must supply two or more coordinates, example: \\n multiline -p [50, 50] [45, 400], [550, 500]',\r\n            'to draw multiple figures at once enter instructions in acceptable format line by line',\r\n            'canvas size is 700x600',\r\n            'full example: triangle -p [50, 300] [50, 100] [300, 100] -c rgb(0, 0, 255) -b rgba(255, 0, 0, 0.3)'\r\n        ]\r\n\r\n        this.button = document.createElement('button');\r\n        this.button.innerText = 'Ok';\r\n\r\n        this.thanks = document.createElement('div');\r\n        this.thanks.innerText = 'Thanks for using this app!'\r\n\r\n        this.rules.forEach(rule => {\r\n            const li = document.createElement('li');\r\n            li.innerText = `${rule}`\r\n            this.ul.append(li)\r\n        })\r\n        this.field.append(this.header, this.ul, this.thanks, this.button);\r\n        this.window.append(this.field)\r\n        this.app.append(this.window);\r\n\r\n        this.button.addEventListener('click', () => {\r\n            this.window.className = 'helpWindow--hidden'\r\n        })\r\n    }\r\n}","'use strict'\r\n\r\nimport { State } from './src/models/state';\r\nimport { Canvas } from './src/views/canvas';\r\nimport { Controller } from './src/controllers/controller';\r\nimport { Form } from './src/views/form';\r\nimport { ErrorModal } from './src/views/errorModal';\r\nimport { HelpWindow } from './src/views/helpWindow';\r\n\r\nconst controller = new Controller(new State(), new Form(), new Canvas(), new ErrorModal(), new HelpWindow());"]}